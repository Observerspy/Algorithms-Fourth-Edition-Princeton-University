ASSESSMENT SUMMARY Compilation: PASSED API: PASSED Spotbugs: PASSED PMD: PASSED Checkstyle: PASSED Correctness: 28/41 tests passed Memory: 1/1 tests passed Timing: 41/41 tests passed Aggregate score: 80.98% [Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%] ASSESSMENT DETAILS The following files were submitted: ---------------------------------- 2.7K Oct 26 03:16 BruteCollinearPoints.java 3.9K Oct 26 03:16 FastCollinearPoints.java 4.1K Oct 26 03:16 Point.java ******************************************************************************** * COMPILING ******************************************************************************** % javac Point.java *----------------------------------------------------------- % javac BruteCollinearPoints.java *----------------------------------------------------------- % javac FastCollinearPoints.java *----------------------------------------------------------- ================================================================ Checking the APIs of your programs. *----------------------------------------------------------- Point: BruteCollinearPoints: FastCollinearPoints: ================================================================ ******************************************************************************** * CHECKING STYLE AND COMMON BUG PATTERNS ******************************************************************************** % spotbugs *.class *----------------------------------------------------------- ================================================================ % pmd . *----------------------------------------------------------- ================================================================ % checkstyle *.java *----------------------------------------------------------- % custom checkstyle checks for Point.java *----------------------------------------------------------- % custom checkstyle checks for BruteCollinearPoints.java *----------------------------------------------------------- % custom checkstyle checks for FastCollinearPoints.java *----------------------------------------------------------- ================================================================ ******************************************************************************** * TESTING CORRECTNESS ******************************************************************************** Testing correctness of Point *----------------------------------------------------------- Running 3 total tests. Test 1: p.slopeTo(q) * positive infinite slope, where p and q have coordinates in [0, 500) * positive infinite slope, where p and q have coordinates in [0, 32768) * negative infinite slope, where p and q have coordinates in [0, 500) * negative infinite slope, where p and q have coordinates in [0, 32768) * positive zero slope, where p and q have coordinates in [0, 500) * positive zero slope, where p and q have coordinates in [0, 32768) * symmetric for random points p and q with coordinates in [0, 500) * symmetric for random points p and q with coordinates in [0, 32768) * transitive for random points p, q, and r with coordinates in [0, 500) * transitive for random points p, q, and r with coordinates in [0, 32768) * slopeTo(), where p and q have coordinates in [0, 500) * slopeTo(), where p and q have coordinates in [0, 32768) * slopeTo(), where p and q have coordinates in [0, 10) * throw a java.lang.NullPointerException if argument is null ==> passed Test 2: p.compareTo(q) * reflexive, where p and q have coordinates in [0, 500) * reflexive, where p and q have coordinates in [0, 32768) * antisymmetric, where p and q have coordinates in [0, 500) * antisymmetric, where p and q have coordinates in [0, 32768) * transitive, where p, q, and r have coordinates in [0, 500) * transitive, where p, q, and r have coordinates in [0, 32768) * sign of compareTo(), where p and q have coordinates in [0, 500) * sign of compareTo(), where p and q have coordinates in [0, 32768) * sign of compareTo(), where p and q have coordinates in [0, 10) * throw java.lang.NullPointerException exception if argument is null ==> passed Test 3: p.slopeOrder().compare(q, r) * reflexive, where p and q have coordinates in [0, 500) * reflexive, where p and q have coordinates in [0, 32768) * antisymmetric, where p, q, and r have coordinates in [0, 500) * antisymmetric, where p, q, and r have coordinates in [0, 32768) * transitive, where p, q, r, and s have coordinates in [0, 500) * transitive, where p, q, r, and s have coordinates in [0, 32768) * sign of compare(), where p, q, and r have coordinates in [0, 500) * sign of compare(), where p, q, and r have coordinates in [0, 32768) * sign of compare(), where p, q, and r have coordinates in [0, 10) * throw java.lang.NullPointerException if either argument is null ==> passed Total: 3/3 tests passed! ================================================================ ******************************************************************************** * TESTING CORRECTNESS (substituting reference Point and LineSegment) ******************************************************************************** Testing correctness of BruteCollinearPoints *----------------------------------------------------------- Running 17 total tests. The inputs satisfy the following conditions: - no duplicate points - no 5 (or more) points are collinear - all x- and y-coordinates between 0 and 32,767 Test 1: points from a file * filename = input8.txt * filename = equidistant.txt * filename = input40.txt * filename = input48.txt ==> passed Test 2a: points from a file with horizontal line segments * filename = horizontal5.txt * filename = horizontal25.txt ==> passed Test 2b: random horizontal line segments * 1 random horizontal line segment * 5 random horizontal line segments * 10 random horizontal line segments * 15 random horizontal line segments ==> passed Test 3a: points from a file with vertical line segments * filename = vertical5.txt * filename = vertical25.txt ==> passed Test 3b: random vertical line segments * 1 random vertical line segment * 5 random vertical line segments * 10 random vertical line segments * 15 random vertical line segments ==> passed Test 4a: points from a file with no line segments * filename = random23.txt * filename = random38.txt ==> passed Test 4b: random points with no line segments * 5 random points * 10 random points * 20 random points * 50 random points ==> passed Test 5: points from a file with fewer than 4 points * filename = input1.txt * filename = input2.txt * filename = input3.txt ==> passed Test 6: check for dependence on either compareTo() or compare() returning { -1, +1, 0 } instead of { negative integer, positive integer, zero } * filename = equidistant.txt * filename = input40.txt * filename = input48.txt ==> passed Test 7: check for fragile dependence on return value of toString() * filename = equidistant.txt * filename = input40.txt * filename = input48.txt ==> passed Test 8: random line segments, none vertical or horizontal * 1 random line segment * 5 random line segments * 10 random line segments * 15 random line segments ==> passed Test 9: random line segments * 1 random line segment * 5 random line segments * 10 random line segments * 15 random line segments ==> passed Test 10: check that data type is immutable by testing whether each method returns the same value, regardless of any intervening operations * input8.txt * equidistant.txt ==> passed Test 11: check that data type does not mutate the constructor argument * input8.txt - data type mutated the points[] array - data type should have no side effects unless documented in API * equidistant.txt - data type mutated the points[] array - data type should have no side effects unless documented in API ==> FAILED Test 12: numberOfSegments() is consistent with segments() * filename = input8.txt * filename = equidistant.txt * filename = input40.txt * filename = input48.txt * filename = horizontal5.txt * filename = vertical5.txt * filename = random23.txt ==> passed Test 13: throws an exception if either the constructor argument is null or any entry in array is null * argument is null * Point[] of length 10, number of null entries = 1 - constructor throws wrong exception - constructor throws a java.lang.NullPointerException - constructor should throw a java.lang.IllegalArgumentException 10 12951 8998 7985 23443 6288 21278 6534 6303 11578 21459 null 25505 25138 28940 13211 19876 11854 24057 22986 * Point[] of length 10, number of null entries = 10 - constructor throws wrong exception - constructor throws a java.lang.NullPointerException - constructor should throw a java.lang.IllegalArgumentException 10 null null null null null null null null null null * Point[] of length 4, number of null entries = 1 - constructor throws wrong exception - constructor throws a java.lang.NullPointerException - constructor should throw a java.lang.IllegalArgumentException 4 null 19969 15620 19609 9558 20154 16515 * Point[] of length 3, number of null entries = 1 - constructor throws wrong exception - constructor throws a java.lang.NullPointerException - constructor should throw a java.lang.IllegalArgumentException 3 29586 30563 25178 13977 null * Point[] of length 2, number of null entries = 1 - constructor throws wrong exception - constructor throws a java.lang.NullPointerException - constructor should throw a java.lang.IllegalArgumentException 2 27678 20699 null * Point[] of length 1, number of null entries = 1 ==> FAILED Test 14: check that the constructor throws an exception if duplicate points * 50 points * 25 points * 5 points * 4 points * 3 points * 2 points ==> passed Total: 15/17 tests passed! ================================================================ Testing correctness of FastCollinearPoints *----------------------------------------------------------- Running 21 total tests. The inputs satisfy the following conditions: - no duplicate points - all x- and y-coordinates between 0 and 32,767 Test 1: points from a file * filename = input8.txt * filename = equidistant.txt * filename = input40.txt - number of entries in student solution: 7 - number of entries in reference solution: 4 - 3 extra entries in student solution, including: '(14000, 14000) -> (26000, 26000)' * filename = input48.txt - number of entries in student solution: 19 - number of entries in reference solution: 6 - 13 extra entries in student solution, including: '(19000, 24000) -> (1000, 26000)' * filename = input299.txt - number of entries in student solution: 16 - number of entries in reference solution: 6 - 10 extra entries in student solution, including: '(10350, 20800) -> (12800, 23950)' ==> FAILED Test 2a: points from a file with horizontal line segments * filename = horizontal5.txt * filename = horizontal25.txt * filename = horizontal50.txt * filename = horizontal75.txt * filename = horizontal100.txt ==> passed Test 2b: random horizontal line segments * 1 random horizontal line segment * 5 random horizontal line segments * 10 random horizontal line segments * 15 random horizontal line segments ==> passed Test 3a: points from a file with vertical line segments * filename = vertical5.txt * filename = vertical25.txt * filename = vertical50.txt * filename = vertical75.txt * filename = vertical100.txt ==> passed Test 3b: random vertical line segments * 1 random vertical line segment * 5 random vertical line segments * 10 random vertical line segments * 15 random vertical line segments ==> passed Test 4a: points from a file with no line segments * filename = random23.txt * filename = random38.txt * filename = random91.txt * filename = random152.txt ==> passed Test 4b: random points with no line segments * 5 random points * 10 random points * 20 random points * 50 random points ==> passed Test 5a: points from a file with 5 or more on some line segments * filename = input9.txt * filename = input10.txt * filename = input20.txt - number of entries in student solution: 8 - number of entries in reference solution: 5 - 3 extra entries in student solution, including: '(6144, 20992) -> (8192, 29184)' * filename = input50.txt - number of entries in student solution: 21 - number of entries in reference solution: 7 - 14 extra entries in student solution, including: '(19000, 24000) -> (1000, 26000)' * filename = input80.txt - number of entries in student solution: 96 - number of entries in reference solution: 31 - 65 extra entries in student solution, including: '(25000, 27000) -> (13000, 29000)' * filename = input300.txt - number of entries in student solution: 16 - number of entries in reference solution: 6 - 10 extra entries in student solution, including: '(10350, 20800) -> (12800, 23950)' * filename = inarow.txt - number of entries in student solution: 12 - number of entries in reference solution: 5 - 7 extra entries in student solution, including: '(26000, 10000) -> (25000, 12400)' ==> FAILED Test 5b: points from a file with 5 or more on some line segments * filename = kw1260.txt - number of entries in student solution: 627 - number of entries in reference solution: 288 - 339 extra entries in student solution, including: '(15979, 30308) -> (14236, 30449)' * filename = rs1423.txt - number of entries in student solution: 464 - number of entries in reference solution: 443 - 21 extra entries in student solution, including: '(19526, 20411) -> (28776, 21225)' ==> FAILED Test 6: points from a file with fewer than 4 points * filename = input1.txt * filename = input2.txt * filename = input3.txt ==> passed Test 7: check for dependence on either compareTo() or compare() returning { -1, +1, 0 } instead of { negative integer, positive integer, zero } * filename = equidistant.txt * filename = input40.txt - number of entries in student solution: 7 - number of entries in reference solution: 4 - 3 extra entries in student solution, including: '(14000, 14000) -> (26000, 26000)' * filename = input48.txt - number of entries in student solution: 19 - number of entries in reference solution: 6 - 13 extra entries in student solution, including: '(19000, 24000) -> (1000, 26000)' * filename = input299.txt - number of entries in student solution: 16 - number of entries in reference solution: 6 - 10 extra entries in student solution, including: '(10350, 20800) -> (12800, 23950)' ==> FAILED Test 8: check for fragile dependence on return value of toString() * filename = equidistant.txt * filename = input40.txt - number of entries in student solution: 7 - number of entries in reference solution: 4 - 3 extra entries in student solution, including: '(14000, 14000) -> (26000, 26000)' * filename = input48.txt - number of entries in student solution: 19 - number of entries in reference solution: 6 - 13 extra entries in student solution, including: '(19000, 24000) -> (1000, 26000)' It is bad style to write code that depends on the particular format of the output from the toString() method, especially if your reason for doing so is to circumvent the public API (which intentionally does not provide access to the x- and y-coordinates). ==> FAILED Test 9: random line segments, none vertical or horizontal * 1 random line segment * 5 random line segments * 25 random line segments * 50 random line segments * 100 random line segments - number of entries in student solution: 101 - number of entries in reference solution: 100 - 1 extra entry in student solution: '(11581, 5859) -> (14903, 19600)' - failed on trial 1 of 2 ==> FAILED Test 10: random line segments * 1 random line segment * 5 random line segments * 25 random line segments * 50 random line segments - number of entries in student solution: 51 - number of entries in reference solution: 50 - 1 extra entry in student solution: '(12219, 9254) -> (12237, 11533)' - failed on trial 6 of 15 * 100 random line segments ==> FAILED Test 11: random distinct points in a given range * 5 random points in a 10-by-10 grid * 10 random points in a 10-by-10 grid - number of entries in student solution: 1 - number of entries in reference solution: 0 - 1 extra entry in student solution: '(3, 1) -> (3, 9)' - failed on trial 1 of 500 10 7 0 1 7 3 1 2 9 0 6 2 4 0 2 4 0 3 5 3 9 * 50 random points in a 10-by-10 grid - number of entries in student solution: 85 - number of entries in reference solution: 38 - 47 extra entries in student solution, including: '(2, 8) -> (7, 9)' - failed on trial 1 of 100 * 90 random points in a 10-by-10 grid - number of entries in student solution: 309 - number of entries in reference solution: 131 - 178 extra entries in student solution, including: '(5, 8) -> (9, 9)' - failed on trial 1 of 50 * 200 random points in a 50-by-50 grid - number of entries in student solution: 690 - number of entries in reference solution: 213 - 477 extra entries in student solution, including: '(34, 45) -> (46, 47)' - failed on trial 1 of 10 ==> FAILED Test 12: m*n points on an m-by-n grid * 3-by-3 grid - number of entries in student solution: 2 - number of entries in reference solution: 0 - 2 extra entries in student solution, including: '(2, 0) -> (2, 2)' * 4-by-4 grid - number of entries in student solution: 12 - number of entries in reference solution: 10 - 2 extra entries in student solution, including: '(1, 1) -> (2, 3)' * 5-by-5 grid - number of entries in student solution: 27 - number of entries in reference solution: 16 - 11 extra entries in student solution, including: '(1, 3) -> (4, 4)' * 10-by-10 grid - number of entries in student solution: 365 - number of entries in reference solution: 154 - 211 extra entries in student solution, including: '(4, 8) -> (9, 9)' * 20-by-20 grid - number of entries in student solution: 6148 - number of entries in reference solution: 2446 - 3702 extra entries in student solution, including: '(9, 18) -> (19, 19)' * 5-by-4 grid - number of entries in student solution: 20 - number of entries in reference solution: 13 - 7 extra entries in student solution, including: '(1, 2) -> (4, 3)' * 6-by-4 grid - number of entries in student solution: 28 - number of entries in reference solution: 16 - 12 extra entries in student solution, including: '(2, 2) -> (5, 3)' * 10-by-4 grid - number of entries in student solution: 72 - number of entries in reference solution: 38 - 34 extra entries in student solution, including: '(4, 2) -> (9, 3)' * 15-by-4 grid - number of entries in student solution: 161 - number of entries in reference solution: 79 - 82 extra entries in student solution, including: '(6, 2) -> (14, 3)' * 25-by-4 grid - number of entries in student solution: 434 - number of entries in reference solution: 213 - 221 extra entries in student solution, including: '(11, 2) -> (24, 3)' ==> FAILED Test 13: check that data type is immutable by testing whether each method returns the same value, regardless of any intervening operations * input8.txt * equidistant.txt ==> passed Test 14: check that data type does not mutate the constructor argument * input8.txt - data type mutated the points[] array - data type should have no side effects unless documented in API * equidistant.txt - data type mutated the points[] array - data type should have no side effects unless documented in API ==> FAILED Test 15: numberOfSegments() is consistent with segments() * filename = input8.txt * filename = equidistant.txt * filename = input40.txt * filename = input48.txt * filename = horizontal5.txt * filename = vertical5.txt * filename = random23.txt ==> passed Test 16: throws an exception if either constructor argument is null or any entry in array is null * argument is null * Point[] of length 10, number of null entries = 1 - constructor throws wrong exception - constructor throws a java.lang.NullPointerException - constructor should throw a java.lang.IllegalArgumentException 10 11929 30001 30762 7496 26549 19381 32481 31122 3749 30723 21063 4135 22833 29394 9655 32292 57 18071 null * Point[] of length 10, number of null entries = 10 - constructor throws wrong exception - constructor throws a java.lang.NullPointerException - constructor should throw a java.lang.IllegalArgumentException 10 null null null null null null null null null null * Point[] of length 4, number of null entries = 1 - constructor throws wrong exception - constructor throws a java.lang.NullPointerException - constructor should throw a java.lang.IllegalArgumentException 4 null 24006 32172 11571 27977 31372 10123 * Point[] of length 3, number of null entries = 1 - constructor throws wrong exception - constructor throws a java.lang.NullPointerException - constructor should throw a java.lang.IllegalArgumentException 3 14021 26571 null 21745 15132 * Point[] of length 2, number of null entries = 1 - constructor throws wrong exception - constructor throws a java.lang.NullPointerException - constructor should throw a java.lang.IllegalArgumentException 2 21661 8167 null * Point[] of length 1, number of null entries = 1 - constructor fails to throw an exception 1 null ==> FAILED Test 17: check that the constructor throws an exception if duplicate points * 50 points * 25 points * 5 points * 4 points * 3 points * 2 points ==> passed Total: 10/21 tests passed! ================================================================ ******************************************************************************** * MEMORY ******************************************************************************** Analyzing memory of Point *----------------------------------------------------------- Running 1 total tests. The maximum amount of memory per Point object is 32 bytes. Student memory = 24 bytes (passed) Total: 1/1 tests passed! ================================================================ ******************************************************************************** * TIMING ******************************************************************************** Timing BruteCollinearPoints *----------------------------------------------------------- Running 10 total tests. Test 1a-1e: Find collinear points among n random distinct points slopeTo() n time slopeTo() compare() + 2*compare() compareTo() ----------------------------------------------------------------------------------------------- => passed 16 0.00 0 560 1120 168 => passed 32 0.00 0 4960 9920 615 => passed 64 0.00 0 41664 83328 2319 => passed 128 0.01 0 341376 682752 8855 => passed 256 0.05 0 2763578 5527156 34381 ==> 5/5 tests passed Test 2a-2e: Find collinear points among n/4 arbitrary line segments slopeTo() n time slopeTo() compare() + 2*compare() compareTo() ----------------------------------------------------------------------------------------------- => passed 16 0.00 0 619 1238 167 => passed 32 0.00 0 5348 10696 616 => passed 64 0.00 0 43344 86688 2326 => passed 128 0.01 0 348037 696074 8866 => passed 256 0.04 0 2790342 5580684 34376 ==> 5/5 tests passed Total: 10/10 tests passed! ================================================================ Timing FastCollinearPoints *----------------------------------------------------------- Running 31 total tests. Test 1a-1g: Find collinear points among n random distinct points slopeTo() n time slopeTo() compare() + 2*compare() compareTo() ----------------------------------------------------------------------------------------------- => passed 64 0.01 3906 9969 23844 2321 => passed 128 0.01 16002 47276 110554 8865 => passed 256 0.03 64770 220120 505010 34383 => passed 512 0.13 260610 1001860 2264330 134786 => passed 1024 0.31 1045506 4490629 10026764 532738 => passed 2048 0.61 4188162 19914564 44017290 2116125 ==> 6/6 tests passed lg ratio(slopeTo() + 2*compare()) = lg (44017290 / 10026764) = 2.13 => passed ==> 7/7 tests passed Test 2a-2g: Find collinear points among the n points on an n-by-1 grid slopeTo() n time slopeTo() compare() + 2*compare() compareTo() ----------------------------------------------------------------------------------------------- => passed 64 0.00 3906 3906 11718 2321 => passed 128 0.00 16002 16002 48006 8872 => passed 256 0.00 64770 64770 194310 34387 => passed 512 0.01 260610 260610 781830 134798 => passed 1024 0.04 1045506 1045506 3136518 532737 => passed 2048 0.09 4188162 4188162 12564486 2116105 => passed 4096 0.35 16764930 16764930 50294790 8430636 ==> 7/7 tests passed lg ratio(slopeTo() + 2*compare()) = lg (50294790 / 12564486) = 2.00 => passed ==> 8/8 tests passed Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid slopeTo() n time slopeTo() compare() + 2*compare() compareTo() ----------------------------------------------------------------------------------------------- => passed 64 0.00 3906 8929 21764 2320 => passed 128 0.00 16002 34478 84958 8871 => passed 256 0.01 64770 102213 269196 34373 => passed 512 0.04 260610 376209 1013028 134810 => passed 1024 0.09 1045506 1450703 3946912 532763 => passed 2048 0.19 4188162 5701608 15591378 2116098 => passed 4096 0.57 16764930 22603347 61971624 8430599 ==> 7/7 tests passed lg ratio(slopeTo() + 2*compare()) = lg (61971624 / 15591378) = 1.99 => passed ==> 8/8 tests passed Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid slopeTo() n time slopeTo() compare() + 2*compare() compareTo() ----------------------------------------------------------------------------------------------- => passed 64 0.00 3906 9654 23214 2320 => passed 128 0.00 16002 43867 103736 8869 => passed 256 0.01 64770 159505 383780 34379 => passed 512 0.01 260610 515563 1291736 134797 => passed 1024 0.04 1045506 1961379 4968264 532742 => passed 2048 0.17 4188162 7662298 19512758 2116110 => passed 4096 0.67 16764930 30282351 77329632 8430608 ==> 7/7 tests passed lg ratio(slopeTo() + 2*compare()) = lg (77329632 / 19512758) = 1.99 => passed ==> 8/8 tests passed Total: 31/31 tests passed! ================================================================
